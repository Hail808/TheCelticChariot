
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  address_id   Int        @id @default(autoincrement())
  street_line1 String     @db.VarChar(100)
  street_line2 String?    @db.VarChar(100)
  city         String     @db.VarChar(50)
  state        String?    @db.VarChar(50)
  postal_code  String?    @db.VarChar(20)
  country      String     @db.VarChar(50)
  customer     customer[]
  guest        guest[]
  orders       orders[]
  shipping     shipping[]
}

model category {
  category_id Int       @id @default(autoincrement())
  name        String
  description String?
  product     product[]
}

model customer {
  customer_id        Int       @id @default(autoincrement())
  first_name         String    @db.VarChar(50)
  last_name          String    @db.VarChar(50)
  email              String    @db.VarChar(50)
  password           String    @db.VarChar(50)
  phone_num          String    @db.VarChar(15)
  last_login         DateTime? @db.Date
  fk_ship_address_id Int?
  fk_bill_address_id Int?
  address            address?  @relation(fields: [fk_ship_address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bill_address_id")
  orders             orders[]
  reviews            reviews[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

model guest {
  guest_id           Int      @id @default(autoincrement())
  email              String   @db.VarChar(30)
  phone_num          String   @db.VarChar(15)
  fk_ship_address_id Int?
  fk_bill_address_id Int?
  address            address? @relation(fields: [fk_ship_address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bill_address_id")
  orders             orders[]
}

model inventory {
  item_id  Int      @id(map: "inventory2_pkey") @default(autoincrement())
  name     String?
  category String?
  tags     String[]
  price    Decimal? @db.Decimal(10, 2)
}

model invoice {
  invoice_id     Int            @id @default(autoincrement())
  fk_order_id    Int?
  invoice_number String         @db.VarChar(50)
  invoice_date   DateTime       @db.Date
  total_price    Decimal?       @db.Decimal(10, 2)
  due_date       DateTime       @db.Date
  payment_status payment_status @default(pending)
  orders         orders?        @relation(fields: [fk_order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_id")
  payment        payment[]
}

model order_item {
  order_item_id Int      @id @default(autoincrement())
  fk_order_id   Int?
  fk_product_id Int?
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  orders        orders?  @relation(fields: [fk_order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_id")
  product       product? @relation(fields: [fk_product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

model orders {
  order_id           Int          @id @default(autoincrement())
  order_date         DateTime     @default(dbgenerated("CURRENT_DATE")) @db.Date
  total_price        Decimal      @db.Decimal(10, 2)
  order_status       String       @db.VarChar(20)
  fk_ship_address_id Int?
  fk_bill_address_id Int?
  fk_customer_id     Int?
  fk_guest_id        Int?
  invoice            invoice[]
  order_item         order_item[]
  address            address?     @relation(fields: [fk_ship_address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bill_address_id")
  customer           customer?    @relation(fields: [fk_customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_id")
  guest              guest?       @relation(fields: [fk_guest_id], references: [guest_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_guest_id")
  shipping           shipping[]
}

model payment {
  payment_id     Int      @id @default(autoincrement())
  fk_invoice_id  Int?
  payment_method String   @db.VarChar(50)
  payment_date   DateTime @db.Date
  amount_paid    Decimal? @db.Decimal(10, 2)
  invoice        invoice? @relation(fields: [fk_invoice_id], references: [invoice_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_id")
}

model product {
  product_id     Int          @id @default(autoincrement())
  product_name   String       @db.VarChar(255)
  description    String?
  price          Decimal      @db.Decimal(10, 2)
  inventory      Int
  prod_image_url String?      @db.VarChar(500)
  fk_category_id Int?
  order_item     order_item[]
  category       category?    @relation(fields: [fk_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_id")
  reviews        reviews[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

model reviews {
  review_id      Int       @id @default(autoincrement())
  review_text    String?
  review_date    DateTime  @db.Date
  rating         Int
  fk_customer_id Int?
  fk_product_id  Int?
  customer       customer? @relation(fields: [fk_customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_id")
  product        product?  @relation(fields: [fk_product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

model shipping {
  shipping_id            Int             @id @default(autoincrement())
  fk_order_id            Int?
  fk_shipping_address_id Int?
  tracking_num           String?         @db.VarChar(50)
  carrier                String          @db.VarChar(50)
  shipping_status        shipping_status @default(not_yet_shipped)
  orders                 orders?         @relation(fields: [fk_order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_id")
  address                address?        @relation(fields: [fk_shipping_address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shipping_address_id")
}

enum payment_status {
  pending
  paid
  overdue
  partially_paid @map("partially paid")
  cancelled
  refunded
}

enum shipping_status {
  delivered
  shipped
  not_yet_shipped @map("not yet shipped")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
